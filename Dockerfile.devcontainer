FROM debian:bookworm-slim
# Setup a user with default UID=1000 (debain, ubuntu), add as argument so image can be custom built
ARG USERNAME=dev
ARG USER_UID=1000
ARG USER_GID=$USER_UID

# We use clang and ssl defaults from bookworm because that is our base runtime distro
# Install major nodejs LTS version (20.x) from nodesource to use corepack
# First install basic tools and create dev user
RUN apt update && export DEBIAN_FRONTEND=noninteractive \
    && apt -y install --no-install-recommends \
    gnupg \
    software-properties-common \
    curl \
    wget \
    ca-certificates locales \
    procps sudo lsb-release apt-utils \
    && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key 23F3D4EA75716059 \
    && apt-add-repository -u https://cli.github.com/packages \
    # Add google chrome repo
    && wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list \
    # Install our default compiler, db client and node version
    && curl --proto '=https' --tlsv1.2 -sSf https://deb.nodesource.com/setup_20.x | sh -s -- -y \
    && apt-get update \
    && apt install -y --no-install-recommends \
    # Chrome
    google-chrome-stable \
    # Cypress dependencies
    libgtk2.0-0 \
    libgtk-3-0 \
    libgbm-dev \
    libnotify-dev \
    libnss3 \
    libxss1 \
    libasound2 \
    libxtst6 \
    xauth \
    xvfb \
    # Other dependencies
    lld \
    lldb \
    clang \
    curl \
    make \
    pkg-config \
    protobuf-compiler \
    libprotobuf-dev \
    libssl-dev \
    git \
    nodejs \
    openjdk-17-jdk-headless \
    postgresql-client-15 \
    poppler-utils \
    openssh-client \
    wget \
    libomp5 \
    libgomp1 \
    # Clean up
    && apt autoremove -y \
    && apt clean -y \
    && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/google-chrome.list

# Download and install ONNX Runtime GPU (compatible with ort 2.0.0-rc.10)
ENV ORT_VERSION=1.22.0
RUN wget -q https://github.com/microsoft/onnxruntime/releases/download/v${ORT_VERSION}/onnxruntime-linux-x64-gpu-${ORT_VERSION}.tgz \
    && tar -xzf onnxruntime-linux-x64-gpu-${ORT_VERSION}.tgz \
    && mv onnxruntime-linux-x64-gpu-${ORT_VERSION} /opt/onnxruntime \
    && rm onnxruntime-linux-x64-gpu-${ORT_VERSION}.tgz

ENV ORT_LIB_LOCATION=/opt/onnxruntime/lib
ENV LD_LIBRARY_PATH="${ORT_LIB_LOCATION}:${LD_LIBRARY_PATH}"
ENV PROTOC="/usr/bin/protoc"

# Configure default locale for code dev
RUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \
    dpkg-reconfigure --frontend=noninteractive locales && \
    update-locale LANG=en_US.UTF-8

ENV LANG en_US.UTF-8 \
    LANGUAGE en_US:en \
    LC_ALL en_US.UTF-8

ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64 \
    PATH=$JAVA_HOME/bin:$PATH

# Create a non-root user to use - see https://aka.ms/vscode-remote/containers/non-root-user.
RUN groupadd --gid $USER_GID $USERNAME && \
    useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME -d /home/dev && \
    echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME && \
    chmod 0440 /etc/sudoers.d/$USERNAME

# Change to nonroot user so files created are not root owned on host
USER $USERNAME

# Install uv - python package manager
RUN curl -LsSf https://astral.sh/uv/install.sh | sh

# Make uv available in the path for subsequent RUN commands and for the container
ENV PATH="/home/dev/.local/bin:$PATH"

# Install Python 3.11 using uv
RUN uv python install 3.11

# Install Rust, our standard is the latest stable - you must pin it in the toolchain for the project
ENV RUSTFLAGS="-C linker=clang -C link-arg=-fuse-ld=lld -C target-cpu=x86-64" \
    CARGO_HOME="/home/dev/.cargo" \
    RUSTUP_HOME="/home/dev/.rustup" \
    PNPM_HOME="/home/dev/.local/share/pnpm" \
    PATH="/home/dev/.cargo/bin:/home/dev/.local/share/pnpm:$PATH" \
    SHELL="/bin/bash" \
    ORT_STRATEGY=system

RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain none && \
    rustup toolchain install 1.88 --component rust-analyzer,llvm-tools

# Install our default cargo tools on 0xCarbon
RUN cargo install cargo-audit cargo-expand cargo-tarpaulin cargo-deny cargo-fuzz && \
    cargo install --version='^0.8' sqlx-cli --no-default-features --features rustls,postgres && \
    cargo install sccache

# Pin pnpm to 8.15.9 and yarn 3.6.2 to stable 
RUN sudo corepack enable && \
    corepack prepare pnpm@8.15.9 --activate && \
    corepack prepare yarn@3.6.2 --activate && \
    pnpm setup && \
    pnpm install -g redis-cli

RUN . /home/dev/.bashrc
WORKDIR /workspaces

CMD [ "sleep", "infinity" ]
